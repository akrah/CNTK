ConvBNReLULayer(inp, outMap, inWCount, kW, kH, hStride, vStride, wScale, bValue, scValue, bnTimeConst)
[
    W = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
	b = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc = Parameter(outMap, 1, init = fixedValue, value = scValue)
    m = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    isd = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    c = Convolution(W, inp, kW, kH, outMap, hStride, vStride, zeroPadding = true, imageLayout = "cudnn")
	a = Autobinomial(c)	
    bn = BatchNormalization(a, sc, b, m, isd, eval = false, spatial = true, normalizationTimeConstant = bnTimeConst, imageLayout = "cudnn")	
    y = RectifiedLinear(bn)
]

ResNetNode2(inp, outMap, inWCount, kW, kH, wScale, bValue, scValue, bnTimeConst)
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, outMap, inWCount, kW, kH, 1, 1, wScale, bValue, scValue, bnTimeConst)
    # Second convolution layer, no ReLU.
    W = Parameter(outMap, inWCount, init = Gaussian, initValueScale = wScale)
    b = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc = Parameter(outMap, 1, init = fixedValue, value = scValue)
    m = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    isd = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    
    c = Convolution(W, c1, kW, kH, outMap, 1, 1, zeroPadding = true, imageLayout = "cudnn")
    a = Autobinomial(c)	
    p = Plus(a, inp)
    bn = BatchNormalization(p, sc, b, m, isd, eval = false, spatial = true, normalizationTimeConstant = bnTimeConst, imageLayout = "cudnn")
    #y = RectifiedLinear(p)
]

ResNetNode2Inc(inp, outMap, inWCount, wCount, kW, kH, wScale, bValue, scValue, bnTimeConst, Wproj)
[
    # First convolution layer.
    c1 = ConvBNReLULayer(inp, outMap, inWCount, kW, kH, 2, 2, wScale, bValue, scValue, bnTimeConst)
    # Second convolution layer, no ReLU.
    W = Parameter(outMap, wCount, init = Gaussian, initValueScale = wScale)
    b = Parameter(outMap, 1, init = fixedValue, value = bValue)
    sc = Parameter(outMap, 1, init = fixedValue, value = scValue)
    m = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    isd = Parameter(outMap, 1, init = fixedValue, value = 0, learningRateMultiplier = 0)
    c = Convolution(W, c1, kW, kH, outMap, 1, 1, zeroPadding = true, imageLayout = "cudnn")
    a = Autobinomial(c)	
 	
    # Projection convolution layer.
	c_proj = Convolution(Wproj, inp, 1, 1, outMap, 2, 2, zeroPadding = true, imageLayout = "cudnn")
	a_proj = Autobinomial(c_proj)	
    p = Plus(a, a_proj)
	y = BatchNormalization(p, sc, b, m, isd, eval = false, spatial = true, normalizationTimeConstant = bnTimeConst, imageLayout = "cudnn")

]

DnnLastLayer(hiddenDim, labelDim, x, wScale, bValue)
[
    W = Parameter(labelDim, hiddenDim, init = Gaussian, initValueScale = wScale)
    b = Parameter(labelDim, init = fixedValue, value = bValue)
    t = Times(W, x)
    z = Plus(t, b)
]
